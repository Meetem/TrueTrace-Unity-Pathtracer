    // #pragma use_dxc
    // #pragma enable_d3d11_debug_symbols
#include "../GlobalDefines.cginc"
#include "CommonData.cginc"
#ifdef HardwareRT
    #include "UnityRayQuery.cginc"
    #pragma require inlineraytracing
    RaytracingAccelerationStructure myAccelerationStructure;
#endif

RWTexture2D<uint4> _PrimaryTriangleInfo;
#pragma kernel kernel_trace 

inline void IntersectTriangle(int mesh_id, const int tri_id, const Ray ray, inout RayHit ray_hit, const int MatOffset) {
    TrianglePos tri = triangle_get_positions(tri_id);
    TriangleUvs tri2 = triangle_get_positions2(tri_id);
    int MaterialIndex = (MatOffset + AggTris[tri_id].MatDat);

    float3 h = cross(ray.direction, tri.posedge2);
    float  a = dot(tri.posedge1, h);

    float  f = rcp(a);
    float3 s = ray.origin - tri.pos0;
    float  u = f * dot(s, h);

    if (u >= 0.0f && u <= 1.0f) {
        float3 q = cross(s, tri.posedge1);
        float  v = f * dot(ray.direction, q);

        if (v >= 0.0f && u + v <= 1.0f) {
            float t = f * dot(tri.posedge2, q);

            if (t > 0 && t < ray_hit.t) {
                //major slowdown
                #ifdef AdvancedAlphaMapped
                    if(_Materials[MaterialIndex].MatType == CutoutIndex) {
                        float2 BaseUv = tri2.pos0 * (1.0f - u - v) + tri2.posedge1 * u + tri2.posedge2 * v;
                        float2 Uv = AlignUV(BaseUv, _Materials[MaterialIndex].AlbedoTexScale, _Materials[MaterialIndex].AlphaTex);
                        if(Uv.x != -1 && _AlphaAtlas.SampleLevel(my_linear_clamp_sampler, Uv, 0) < _Materials[MaterialIndex].AlphaCutoff) return;
                    }
                #endif
                #ifdef IgnoreGlassMain
                    if(_Materials[MaterialIndex].specTrans == 1) return;
                #endif
                #ifdef IgnoreBackfacing
                    if(_Materials[MaterialIndex].specTrans != 1 && dot(normalize(cross(normalize(tri.posedge1), normalize(tri.posedge2))), ray.direction) <= 0) return;
                #endif
                if(CurBounce == 0 && GetFlag(_Materials[MaterialIndex].Tag, Invisible)) return;
                ray_hit.t = t;
                ray_hit.u = u;
                ray_hit.v = v;
                ray_hit.mesh_id = mesh_id;
                ray_hit.triangle_id = tri_id;
            }
        }
    }
}


void IntersectBVH() {
    RayHit bestHit;
    Ray ray;
    #ifndef HardwareRT
        int Reps;
        uint2 stack[16];
        int stack_size = 0;
        uint2 current_group;
        uint oct_inv4;
        int tlas_stack_size;
        Ray ray2;
        int NodeOffset;
        int TriOffset;
        int MatOffset;
        int mesh_id = -1;
    #endif
    int ray_index;
    RayData GlobalRay;

        InterlockedAdd(BufferSizes[CurBounce].tracerays, -1, ray_index);
        ray_index--;
        if (ray_index < 0) return;
        [branch]if(CurBounce % 2 == 1) ray_index += screen_width * screen_height;
        GlobalRay = GlobalRays[ray_index];
        bestHit = CreateRayHit();

        #ifdef HardwareRT
            const uint rayFlags = RAY_FLAG_FORCE_OPAQUE  ;
            UnityRayQuery<rayFlags> q;
            RayDesc myRay;
            myRay.Origin = GlobalRays[ray_index].origin;
            myRay.Direction = GlobalRays[ray_index].direction;
            ray.origin = myRay.Origin;
            ray.direction = myRay.Direction;
            myRay.TMin = 0;
            myRay.TMax = FarPlane;
            bestHit.t = FarPlane;
            while(true) {
               q.TraceRayInline(myAccelerationStructure, rayFlags, 0xff, myRay);
                while(q.Proceed()){}

                if(q.CommittedStatus() == COMMITTED_TRIANGLE_HIT) {
                    bestHit.t = q.CommittedRayT();
                    bestHit.u = q.CommittedTriangleBarycentrics().y;
                    bestHit.v = q.CommittedTriangleBarycentrics().x;
                    bestHit.mesh_id = Pack2To1(q.CommittedInstanceID(), q.CommittedGeometryIndex());
                    bestHit.triangle_id = q.CommittedPrimitiveIndex();
                    #ifdef AdvancedAlphaMapped
                        int tri_id;
                        int mesh_id;
                        if(bestHit.mesh_id != 9999999) {
                            int2 Indexes = Unpack1To2(bestHit.mesh_id);
                            int triangleOffset = SubMeshOffsets[MeshOffsets[Indexes.y].x + Indexes.x];
                            tri_id = bestHit.triangle_id + triangleOffset;
                            mesh_id = MeshOffsets[Indexes.y].y;
                        }
                        int MaterialIndex = (_MeshData[mesh_id].MaterialOffset + AggTris[tri_id].MatDat);
                        if(CurBounce == 0 && GetFlag(_Materials[MaterialIndex].Tag, Invisible)) {myRay.TMin = bestHit.t + 0.001f; bestHit.t = FarPlane; continue;}
                        if(_Materials[MaterialIndex].MatType == CutoutIndex) {
                            float2 BaseUv = AggTris[tri_id].tex0 * (1.0f - bestHit.u - bestHit.v) + AggTris[tri_id].texedge1 * bestHit.u + AggTris[tri_id].texedge2 * bestHit.v;
                            float2 Uv = AlignUV(BaseUv, _Materials[MaterialIndex].AlbedoTexScale, _Materials[MaterialIndex].AlphaTex);
                            if(Uv.x != -1 && _AlphaAtlas.SampleLevel(my_point_clamp_sampler, Uv, 0) < _Materials[MaterialIndex].AlphaCutoff) {myRay.TMin = bestHit.t + 0.001f; bestHit.t = FarPlane; continue;}
                        }
                    #endif
                }
                break;
            }


            int PixIndex = GlobalRay.PixelIndex;
            uint2 TempUv = uint2(PixIndex % screen_width, PixIndex / screen_width);
            int2 Indexes = Unpack1To2(bestHit.mesh_id);
            [branch]if(CurBounce == 0) {
                _PrimaryTriangleInfo[TempUv] = uint4(MeshOffsets[Indexes.y].y, bestHit.triangle_id + SubMeshOffsets[MeshOffsets[Indexes.y].x + Indexes.x] - _MeshData[MeshOffsets[Indexes.y].y].TriOffset, asuint(bestHit.u), asuint(bestHit.v));
            } else if(GlobalColors[PixIndex].Data.w == -1 || CurBounce == GlobalColors[PixIndex].Data.w) {
                _PrimaryTriangleInfo[TempUv] = uint4((UseReSTIRGI && bestHit.t != FarPlane) ? uint3(MeshOffsets[Indexes.y].y, bestHit.triangle_id + SubMeshOffsets[MeshOffsets[Indexes.y].x + Indexes.x] - _MeshData[MeshOffsets[Indexes.y].y].TriOffset, ((uint)(bestHit.u * 65535.0f) | ((uint)(bestHit.v * 65535.0f) << 16))) : ((UseASVGF || bestHit.t != FarPlane) ? asuint(ray.direction) : asuint(ray.direction * bestHit.t + ray.origin)), bestHit.t == FarPlane);
            }

            set(ray_index, bestHit);
        #else
            TriOffset = 0;
            MatOffset = 0;
            Reps = 0;
            ray.origin = GlobalRay.origin;
            ray.direction = GlobalRay.direction;
            ray.direction_inv = rcp(ray.direction);
            NodeOffset = 0;
            tlas_stack_size = -1;
            ray2 = ray;

            oct_inv4 = ray_get_octant_inv4(ray.direction);

            current_group.x = (uint)0;
            current_group.y = (uint)0x80000000;
            uint2 triangle_group;
            [loop]while (Reps < 1000) {//Traverse Accelleration Structure(Compressed Wide Bounding Volume Hierarchy)          

                [branch]if (current_group.y & 0xff000000) {
                    uint child_index_offset = firstbithigh(current_group.y);

                    uint slot_index = (child_index_offset - 24) ^ (oct_inv4 & 0xff);
                    uint relative_index = countbits(current_group.y & ~(0xffffffff << slot_index));
                    uint child_node_index = current_group.x + relative_index;

                    current_group.y &= ~(1 << child_index_offset);

                    if (current_group.y & 0xff000000) {
                        stack[stack_size++] = current_group;
                    }
                    const BVHNode8Data TempNode = cwbvh_nodes[child_node_index];
                    float3 node_0 = TempNode.node_0xyz;
                    uint node_0w = TempNode.node_0w;

                    uint4 node_1 = TempNode.node_1;
                    uint4 node_2 = TempNode.node_2;
                    uint4 node_3 = TempNode.node_3;
                    uint4 node_4 = TempNode.node_4;

                    uint hitmask = cwbvh_node_intersect(ray, oct_inv4, bestHit.t, node_0, node_0w, node_1, node_2, node_3, node_4);

                    current_group.y = (hitmask & 0xff000000) | ((node_0w >> 24) & 0xff);
                    triangle_group.y = (hitmask & 0x00ffffff);

                    current_group.x = (node_1.x) + NodeOffset;
                    triangle_group.x = (node_1.y) + TriOffset;

                    Reps++;
                }
                else {
                    triangle_group = current_group;
                    current_group = (uint)0;
                }

                if(triangle_group.y != 0) {
                    [branch]if(tlas_stack_size == -1) {
                        uint mesh_offset = firstbithigh(triangle_group.y);
                        triangle_group.y &= ~(1 << mesh_offset);
                        mesh_id = TLASBVH8Indices[triangle_group.x + mesh_offset];
                        NodeOffset = _MeshData[mesh_id].NodeOffset;
                        TriOffset = _MeshData[mesh_id].TriOffset;
                        if (triangle_group.y != 0) {
                            stack[stack_size++] = triangle_group;
                        }

                        if (current_group.y & 0xff000000) {
                            stack[stack_size++] = current_group;
                        }
                        tlas_stack_size = stack_size;

                        int root_index = (_MeshData[mesh_id].mesh_data_bvh_offsets & 0x7fffffff);

                        MatOffset = _MeshData[mesh_id].MaterialOffset;
                        ray.direction = (mul((float3x3)_MeshData[mesh_id].W2L, ray.direction));
                        ray.origin = (mul(_MeshData[mesh_id].W2L, float4(ray.origin, 1))).xyz;
                        ray.direction_inv = rcp(ray.direction);

                        oct_inv4 = ray_get_octant_inv4(ray.direction);

                        current_group.x = (uint)root_index;
                        current_group.y = (uint)0x80000000;
                    } else {
                        while (triangle_group.y != 0) {
                            uint triangle_index = firstbithigh(triangle_group.y);
                            triangle_group.y &= ~(1 << triangle_index);
                            IntersectTriangle(mesh_id, triangle_group.x + triangle_index, ray, bestHit, MatOffset);//Intersect Mesh Triangles
                        }
                    }
                }
              
                if ((current_group.y & 0xff000000) == 0) {
                    if (stack_size == 0) {//thread has finished traversing
                        int PixIndex = GlobalRay.PixelIndex;
                        uint2 TempUv = uint2(PixIndex % screen_width, PixIndex / screen_width);
                        [branch]if(CurBounce == 0) {
                            _PrimaryTriangleInfo[TempUv] = uint4(bestHit.mesh_id, bestHit.triangle_id - _MeshData[bestHit.mesh_id].TriOffset, asuint(bestHit.u), asuint(bestHit.v));
                            // _DebugTex[TempUv] = float4(Reps / 43.0f, Reps > 80, 0, 1);
                        } else if(GlobalColors[PixIndex].Data.w == -1 || CurBounce == GlobalColors[PixIndex].Data.w) {
                            _PrimaryTriangleInfo[TempUv] = uint4((UseReSTIRGI && bestHit.t != FarPlane) ? uint3(bestHit.mesh_id, bestHit.triangle_id - _MeshData[bestHit.mesh_id].TriOffset, ((uint)(bestHit.u * 65535.0f) | ((uint)(bestHit.v * 65535.0f) << 16))) : ((UseASVGF || bestHit.t != FarPlane) ? asuint(ray2.direction) : asuint(ray2.direction * bestHit.t + ray2.origin)), bestHit.t == FarPlane);
                        }
                        set(ray_index, bestHit);
                        return;
                    }

                    if (stack_size == tlas_stack_size) {
                        NodeOffset = 0;
                        TriOffset = 0;
                        tlas_stack_size = -1;
                        ray = ray2;
                        oct_inv4 = ray_get_octant_inv4(ray.direction);
                    }
                    current_group = stack[--stack_size];
                }
            }
    #endif
}


[numthreads(64, 1, 1)]
void kernel_trace() {//If I move the function contents into here, unity yells at me, so for now its just gonna continue to live in its function
    IntersectBVH();
}

#pragma kernel kernel_shadow

void IntersectBVHShadow() {
    Ray ray;

    #ifndef HardwareRT
        uint2 stack[16];
        int stack_size = 0;
        uint2 current_group;
        int NodeOffset;
        int TriOffset;
        int MatOffset;
        uint oct_inv4;
        int tlas_stack_size;
        Ray ray2;
        float max_distance;
        int Reps = 0;
    #endif

    int mesh_id = -1;
    int ray_index;

        InterlockedAdd(BufferSizes[CurBounce].shadow_rays, -1, ray_index);
        ray_index--;
        if (ray_index < 0) return;

        bool hit = false;
        ShadowRayData ShadowRay = ShadowRaysBuffer[ray_index];
        #ifdef HardwareRT
            const uint rayFlags = RAY_FLAG_CULL_NON_OPAQUE;
            UnityRayQuery<rayFlags> q;
            RayDesc myRay;
            myRay.Origin = ShadowRaysBuffer[ray_index].origin;
            myRay.Direction = ShadowRaysBuffer[ray_index].direction;
            ray.origin = myRay.Origin;
            ray.direction = myRay.Direction;
            myRay.TMin = 0;
            myRay.TMax = abs(ShadowRaysBuffer[ray_index].t);
            while(true) {
                q.TraceRayInline(myAccelerationStructure, rayFlags, 0x1, myRay);
                while(q.Proceed()){}

                if(q.CommittedStatus() == COMMITTED_TRIANGLE_HIT) {

                    float u = q.CommittedTriangleBarycentrics().y;
                    float v = q.CommittedTriangleBarycentrics().x;
                    int2 Indexes = int2(q.CommittedInstanceID(), q.CommittedGeometryIndex());
                    int triangle_id = q.CommittedPrimitiveIndex();
                    #ifdef AdvancedAlphaMapped

                        int triangleOffset = SubMeshOffsets[MeshOffsets[Indexes.x].x + Indexes.y];
                        triangle_id += triangleOffset;
                        mesh_id = MeshOffsets[Indexes.x].y;

                        int MaterialIndex = (_MeshData[mesh_id].MaterialOffset + AggTris[triangle_id].MatDat);
                        if(GetFlag(_Materials[MaterialIndex].Tag, IsBackground) || GetFlag(_Materials[MaterialIndex].Tag, ShadowCaster)) {myRay.TMin = q.CommittedRayT() + 0.001f; continue;} 
                        if(_Materials[MaterialIndex].MatType == CutoutIndex) {
                            float2 BaseUv = AggTris[triangle_id].tex0 * (1.0f - u - v) + AggTris[triangle_id].texedge1 * u + AggTris[triangle_id].texedge2 * v;
                            float2 Uv = AlignUV(BaseUv, _Materials[MaterialIndex].AlbedoTexScale, _Materials[MaterialIndex].AlphaTex);
                            if(Uv.x != -1 && _AlphaAtlas.SampleLevel(my_point_clamp_sampler, Uv, 0) < _Materials[MaterialIndex].AlphaCutoff) {myRay.TMin = q.CommittedRayT() + 0.001f; continue;}

                        }
                    #endif

                    ShadowRaysBuffer[ray_index].t = 0;
                } else {
                    if(!TerrainExists) {
                        uint PixelIndex = ShadowRaysBuffer[ray_index].PixelIndex;
                        if(CurBounce == 0) NEEPosA[uint2(PixelIndex % screen_width, PixelIndex / screen_width)] = float4(ray.origin + ray.direction * abs(ShadowRaysBuffer[ray_index].t),NEEPosA[uint2(PixelIndex % screen_width, PixelIndex / screen_width)].w);
                            #ifdef RadianceCache
                                CacheBuffer[PixelIndex].CurrentIlluminance = EncodeRGB(DecodeRGB(CacheBuffer[PixelIndex].CurrentIlluminance) + ShadowRaysBuffer[ray_index].illumination * ((!UseReSTIRGI || ShadowRaysBuffer[ray_index].t >= 0) ? 1 : unpackRGBE(asuint(ShadowRaysBuffer[ray_index].LuminanceIncomming))));
                            #endif
                        if (ShadowRaysBuffer[ray_index].t >= 0) {
                            if (CurBounce == 0) {

                                GlobalColors[PixelIndex].Direct += ShadowRaysBuffer[ray_index].illumination;
                            } else {
                                #ifndef RadianceCache
                                    GlobalColors[PixelIndex].Indirect += ShadowRaysBuffer[ray_index].illumination;
                                #endif
                            }
                        } else {
                            #ifdef RadianceCache
                                if(CurBounce != 0 &&  (UseReSTIRGI || GlobalColors[PixelIndex].Data.w == CurBounce)) GlobalColors[PixelIndex].Indirect += ShadowRay.illumination * (UseReSTIRGI ? unpackRGBE(asuint(ShadowRay.LuminanceIncomming)) : 1);
                            #else
                                if(CurBounce != 0 && (!UseReSTIRGI && GlobalColors[PixelIndex].Data.w == -1)) GlobalColors[PixelIndex].Indirect += ShadowRay.illumination;// * unpackRGBE(asuint(ShadowRay.LuminanceIncomming));
                            #endif
                            else GlobalColors[PixelIndex].PrimaryNEERay = packRGBE(pow(unpackRGBE(GlobalColors[PixelIndex].PrimaryNEERay),2.2f) + pow(ShadowRay.illumination,rcp(2.2f)));
                        }
                    }
                }
                break;
            }
        #else
            max_distance = abs(ShadowRay.t);
            ray.origin = ShadowRay.origin;
            ray.direction = ShadowRay.direction;
            ray.direction_inv = rcp(ray.direction);
            ray2 = ray;
            float3 throughput = 1;
            TriOffset = 0;
            MatOffset = 0;
            Reps = 0;
            NodeOffset = 0;

            oct_inv4 = ray_get_octant_inv4(ray.direction);

            current_group.x = (uint)0;
            current_group.y = (uint)0x80000000;
            tlas_stack_size = -1;
            uint2 triangle_group;
            [loop] while (Reps < 1000) {//Traverse Accelleration Structure(Compressed Wide Bounding Volume Hierarchy)            
                [branch]if (current_group.y & 0xff000000) {
                   uint child_index_offset = firstbithigh(current_group.y);

                    uint slot_index = (child_index_offset - 24) ^ (oct_inv4 & 0xff);
                    uint relative_index = countbits(current_group.y & ~(0xffffffff << slot_index));
                    uint child_node_index = current_group.x + relative_index;

                    current_group.y &= ~(1 << child_index_offset);

                    if (current_group.y & 0xff000000) stack[stack_size++] = current_group;

                    const BVHNode8Data TempNode = cwbvh_nodes[child_node_index];
                    float3 node_0 = TempNode.node_0xyz;
                    uint node_0w = TempNode.node_0w;

                    uint4 node_1 = TempNode.node_1;
                    uint4 node_2 = TempNode.node_2;
                    uint4 node_3 = TempNode.node_3;
                    uint4 node_4 = TempNode.node_4;

                    uint hitmask = cwbvh_node_intersect(ray, oct_inv4, max_distance, node_0, node_0w, node_1, node_2, node_3, node_4);

                    current_group.y = (hitmask & 0xff000000) | ((node_0w >> 24) & 0xff);
                    triangle_group.y = (hitmask & 0x00ffffff);

                    current_group.x = (node_1.x) + NodeOffset;
                    triangle_group.x = (node_1.y) + TriOffset;

                    Reps++;
                }
                else {
                    triangle_group = current_group;
                    current_group = (uint)0;
                }


                if(triangle_group.y != 0) {
                    [branch]if (tlas_stack_size == -1) {//Transfer from Top Level Accelleration Structure to Bottom Level Accelleration Structure
                        uint mesh_offset = firstbithigh(triangle_group.y);
                        triangle_group.y &= ~(1 << mesh_offset);

                        mesh_id = TLASBVH8Indices[triangle_group.x + mesh_offset];
                        NodeOffset = _MeshData[mesh_id].NodeOffset;
                        TriOffset = _MeshData[mesh_id].TriOffset;

                        if (triangle_group.y != 0) stack[stack_size++] = triangle_group;

                        if (current_group.y & 0xff000000) stack[stack_size++] = current_group;

                        tlas_stack_size = stack_size;

                        int root_index = (_MeshData[mesh_id].mesh_data_bvh_offsets & 0x7fffffff);

                        MatOffset = _MeshData[mesh_id].MaterialOffset;
                        ray.direction = (mul((float3x3)_MeshData[mesh_id].W2L, ray.direction)).xyz;
                        ray.origin = (mul(_MeshData[mesh_id].W2L, float4(ray.origin, 1))).xyz;
                        ray.direction_inv = rcp(ray.direction);

                        oct_inv4 = ray_get_octant_inv4(ray.direction);

                        current_group.x = (uint)root_index;
                        current_group.y = (uint)0x80000000;
                    } else {
                        while (triangle_group.y != 0) {    
                            uint triangle_index = firstbithigh(triangle_group.y);
                            triangle_group.y &= ~(1 << triangle_index);

                            if (triangle_intersect_shadow(triangle_group.x + triangle_index, ray, max_distance, mesh_id, throughput, MatOffset)) {
                                hit = true;
                                break;
                            }
                        }
                    }
                }

                if (hit) {
                    stack_size = 0;
                    current_group.y = 0;
                    ShadowRaysBuffer[ray_index].t = 0;
                    break;
                }

                if ((current_group.y & 0xff000000) == 0) {
                    if (stack_size == 0) {//thread has finished traversing
                        current_group.y = 0;
                        if(!TerrainExists) {
                            uint PixelIndex = ShadowRay.PixelIndex;
                            if(CurBounce == 0) NEEPosA[uint2(PixelIndex % screen_width, PixelIndex / screen_width)] = float4(ray2.origin + ray2.direction * abs(ShadowRaysBuffer[ray_index].t), 0);
                            // if(UseReSTIRGI && ReSTIRGIUpdateRate != 0) NEEPosA[uint2(PixelIndex % screen_width, PixelIndex / screen_width)] += float4(0,0,0,ShadowRay.LuminanceIncomming);
                            #ifdef RadianceCache
                                CacheBuffer[PixelIndex].CurrentIlluminance = EncodeRGB(DecodeRGB(CacheBuffer[PixelIndex].CurrentIlluminance) + ShadowRay.illumination * throughput * ((!UseReSTIRGI || ShadowRay.t >= 0) ? 1 : unpackRGBE(asuint(ShadowRay.LuminanceIncomming))));// * abs(dot(i_octahedral_32(CacheBuffer[PixelIndex].Norm), ShadowRay.direction));
                            #endif
                            if (ShadowRay.t >= 0) {

                                if (CurBounce == 0) {
                                    GlobalColors[PixelIndex].Direct += ShadowRay.illumination * throughput;
                                } else {
                                    #ifndef RadianceCache
                                        GlobalColors[PixelIndex].Indirect += ShadowRay.illumination * throughput;
                                    #endif
                                }
                            } else {
                                #ifdef RadianceCache
                                    if(CurBounce != 0 &&  (UseReSTIRGI || GlobalColors[PixelIndex].Data.w == CurBounce)) GlobalColors[PixelIndex].Indirect += ShadowRay.illumination * throughput * (UseReSTIRGI ? unpackRGBE(asuint(ShadowRay.LuminanceIncomming)) : 1);
                                #else
                                    if(CurBounce != 0 && (!UseReSTIRGI && GlobalColors[PixelIndex].Data.w == -1)) GlobalColors[PixelIndex].Indirect += ShadowRay.illumination * throughput;// * unpackRGBE(asuint(ShadowRay.LuminanceIncomming));
                                #endif
                                else GlobalColors[PixelIndex].PrimaryNEERay = packRGBE(pow(unpackRGBE(GlobalColors[PixelIndex].PrimaryNEERay),2.2f) + pow(ShadowRay.illumination,rcp(2.2f)) * throughput);
                            }
                        } else {
                            ShadowRaysBuffer[ray_index].illumination *= throughput;
                        }
                        break;
                    }

                    if (stack_size == tlas_stack_size) {
                        NodeOffset = 0;
                        TriOffset = 0;
                        tlas_stack_size = -1;
                        ray = ray2;
                        oct_inv4 = ray_get_octant_inv4(ray.direction);
                    }
                    current_group = stack[--stack_size];
                }
            }
        #endif
}


[numthreads(64, 1, 1)]
void kernel_shadow() {//If I move the function contents into here, unity yells at me, so for now its just gonna continue to live in its function
    IntersectBVHShadow();
}



#pragma kernel kernel_shadow_heightmap


static float g = sin(atan(1.0f / 2.0f));

inline bool rayBoxIntersection(const float3 ray_orig, const float3 inv_dir, const float3 Min, const float3 Max, float tMax, inout float t0) {
    const float3 tmp_min = (Min - ray_orig) * inv_dir;
    const float3 tmp_max = (Max - ray_orig) * inv_dir;
    const float3 tmin = min(tmp_min, tmp_max);
    const float3 tmax = max(tmp_min, tmp_max);
    t0 = max(tmin.x, max(tmin.y, max(tmin.z, 0.025f))); // Usually ray_tmin = 0
    float t1 = min(tmax.x, min(tmax.y, min(tmax.z, tMax)));
    return (t0 <= t1);
}



bool IntersectHeightMapShadow(Ray ray, float MaxDist) {
    float3 Origin = ray.origin;
    for (int i = 0; i < TerrainCount; i++) {
        const TerrainData Terrain = Terrains[i];
        float t0;
        if (rayBoxIntersection(Origin, ray.direction_inv, Terrain.PositionOffset, Terrain.PositionOffset + float3(Terrain.TerrainDim.x, Terrain.TerrainDim.x, Terrain.TerrainDim.y), MaxDist, t0)) {
            ray.origin = Origin + ray.direction * (t0 + 0.001f) - Terrain.PositionOffset;
            float3 CurrentPos = ray.origin;
            int step_count = 0;
            float Dist = 0;
            while (step_count < 2000 && Dist < MaxDist && all(ray.origin + ray.direction * Dist < float3(Terrain.TerrainDim.x, 1000, Terrain.TerrainDim.y)) && all(CurrentPos > 0)) {
                CurrentPos = ray.origin + ray.direction * Dist;
                float3 b = float3(Terrain.TerrainDim.x, 0.01f, Terrain.TerrainDim.y);
                float3 q = (abs(CurrentPos) - b);
                q.x /= Terrain.TerrainDim.x;
                q.z /= Terrain.TerrainDim.y;
                float2 uv = float2(min(CurrentPos.x / Terrain.TerrainDim.x, 1), min(CurrentPos.z / Terrain.TerrainDim.y, 1)) * (Terrain.HeightMap.xy - Terrain.HeightMap.zw) + Terrain.HeightMap.zw;
                step_count++;
                float h = Heightmap.SampleLevel(sampler_trilinear_clamp, uv, 0).x;
                h *= Terrain.HeightScale * 2.0f;
                q.y -= h;
                q.y *= g;

                q = max(0, q);
                float dist = length(q);
                if (dist < 0.0001f) {
                    return true;
                }
                Dist += dist;

            }
        }
    }
    return false;

}

void IntersectShadowHeightmap() {
    int ray_index;
    InterlockedAdd(BufferSizes[CurBounce].heightmap_shadow_rays, -1, ray_index);
    if (ray_index < 0) return;
    int pixel_index = ShadowRaysBuffer[ray_index].PixelIndex;
    Ray ray = CreateRay(ShadowRaysBuffer[ray_index].origin, ShadowRaysBuffer[ray_index].direction);
    bool HitHeightmap = TerrainExists;
    if(ShadowRaysBuffer[ray_index].t != 0) {
        if (TerrainExists) HitHeightmap = IntersectHeightMapShadow(ray, abs(ShadowRaysBuffer[ray_index].t));                  
        if(!HitHeightmap) {
            uint PixelIndex = ShadowRaysBuffer[ray_index].PixelIndex;
            if(CurBounce == 0) NEEPosA[uint2(PixelIndex % screen_width, PixelIndex / screen_width)] = float4(ray.origin + ray.direction * abs(ShadowRaysBuffer[ray_index].t), 0);
            // if(UseReSTIRGI && ReSTIRGIUpdateRate != 0) NEEPosA[uint2(PixelIndex % screen_width, PixelIndex / screen_width)] += float4(0,0,0,ShadowRay.LuminanceIncomming);
            #ifdef RadianceCache
                CacheBuffer[PixelIndex].CurrentIlluminance = EncodeRGB(DecodeRGB(CacheBuffer[PixelIndex].CurrentIlluminance) + ShadowRaysBuffer[ray_index].illumination * ((!UseReSTIRGI || ShadowRaysBuffer[ray_index].t >= 0) ? 1 : unpackRGBE(asuint(ShadowRaysBuffer[ray_index].LuminanceIncomming))));// * abs(dot(i_octahedral_32(CacheBuffer[PixelIndex].Norm), ShadowRay.direction));
            #endif
            if (ShadowRaysBuffer[ray_index].t >= 0) {

                if (CurBounce == 0) {
                    GlobalColors[PixelIndex].Direct += ShadowRaysBuffer[ray_index].illumination;
                } else {
                    #ifndef RadianceCache
                        GlobalColors[PixelIndex].Indirect += ShadowRaysBuffer[ray_index].illumination;
                    #endif
                }
            } else {
                if(CurBounce != 0 && UseReSTIRGI) GlobalColors[PixelIndex].Indirect += ShadowRaysBuffer[ray_index].illumination;// * unpackRGBE(asuint(ShadowRay.LuminanceIncomming));
                else GlobalColors[PixelIndex].PrimaryNEERay = packRGBE(pow(unpackRGBE(GlobalColors[PixelIndex].PrimaryNEERay),2.2f) + pow(ShadowRaysBuffer[ray_index].illumination,rcp(2.2f)));
            }
        }
    }
}


[numthreads(64, 1, 1)]
void kernel_shadow_heightmap() {//If I move the function contents into here, unity yells at me, so for now its just gonna continue to live in its function
    IntersectShadowHeightmap();
}
#pragma kernel kernel_heightmap

bool GetDist(float3 CurrentPos, out float2 uv, out float dist, const TerrainData Terrain) {
    float3 b = float3(Terrain.TerrainDim.x, 0.01f, Terrain.TerrainDim.y);
    float3 q = (abs(CurrentPos) - b);
    q.x /= Terrain.TerrainDim.x;
    q.z /= Terrain.TerrainDim.y;
    uv = float2(min(CurrentPos.x / Terrain.TerrainDim.x, 1), min(CurrentPos.z / Terrain.TerrainDim.y, 1));
    float h = Heightmap.SampleLevel(sampler_trilinear_clamp, uv * (Terrain.HeightMap.xy - Terrain.HeightMap.zw) + Terrain.HeightMap.zw, 0).x;
    h *= Terrain.HeightScale * 2.0f;
    q.y -= h;
    q.y *= g;
    float b2 = q.y;
    q = max(0, q);
    dist = length(q);
    return b2 != abs(b2);
}

void IntersectHeightMap() {
    Ray ray;
    Ray ray2;

    int ray_index;
    RayHit bestHit;

    bool DidHit = false;
    float3 CurrentPos;
    int step_count = 0;
    InterlockedAdd(BufferSizes[CurBounce].heighmap_rays, -1, ray_index);
    if (ray_index < 0) return;
    if(CurBounce % 2 == 1) ray_index += screen_width * screen_height;
    ray.origin = GlobalRays[ray_index].origin;
    CurrentPos = ray.origin;
    ray.direction = GlobalRays[ray_index].direction;
    ray.direction_inv = rcp(ray.direction);
    ray2 = ray;
    bestHit = get(ray_index);
    float dist = FarPlane;
    float2 uv;
    for (int i = 0; i < TerrainCount; i++) {
        float t0;
        float CurDist = 0;
        const TerrainData Terrain = Terrains[i];
        if (rayBoxIntersection(ray2.origin, ray.direction_inv, Terrain.PositionOffset + 0.001f, Terrain.PositionOffset + float3(Terrain.TerrainDim.x, Terrain.TerrainDim.x, Terrain.TerrainDim.y) - 0.001f, bestHit.t, t0)) {
            CurDist = 0;
            dist = FarPlane;
            ray.origin = ray2.origin + ray.direction * max(t0 + 0.0001f, 0) - Terrain.PositionOffset;
            CurrentPos = ray.origin;
            float PrevDist = 0;
            step_count = 0;
            while (step_count < 2000 && CurDist < bestHit.t && all(ray.origin + ray.direction * CurDist < float3(Terrain.TerrainDim.x, 1000, Terrain.TerrainDim.y)) && all(ray.origin + ray.direction * CurDist > float3(0, 0, 0))) {
                CurrentPos = ray.origin + ray.direction * CurDist;
                step_count++;
                bool throwa = GetDist(CurrentPos, uv, dist, Terrain);
                if (dist < 0.0001f) {
                    if (throwa) {
                        CurDist -= PrevDist /= 2;
                        for (int i = 0; i < 10; i++) {
                            if (GetDist(ray.origin + ray.direction * CurDist, uv, dist, Terrain)) {
                                CurDist -= PrevDist /= 2;
                            }
                            else {
                                for (int i2 = 0; i2 < 10; i2++) {
                                    if (!GetDist(ray.origin + ray.direction * CurDist, uv, dist, Terrain)) {
                                        CurDist += PrevDist /= 2;
                                    }
                                    else {
                                        CurDist -= PrevDist;
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }

                    int PixIndex = GlobalRays[ray_index].PixelIndex;
                    uint2 TempUv = uint2(PixIndex % screen_width, PixIndex / screen_width);

                    bestHit.u = uv.x;
                    bestHit.v = uv.y;
                    bestHit.t = CurDist + t0;
                    bestHit.triangle_id = i;
                    bestHit.mesh_id = 9999999;
                    [branch]if(CurBounce == 0) {
                        _PrimaryTriangleInfo[TempUv] = uint4(asuint(ray2.direction * bestHit.t + ray2.origin), 1);
                    } else if(CurBounce == 1) {
                        _PrimaryTriangleInfo[TempUv] = uint4(((!UseReSTIRGI) ? asuint(ray2.direction) : asuint(ray2.direction * bestHit.t + ray2.origin)), 1);
                    }
                    set(ray_index, bestHit);
                    break;
                }
                PrevDist = dist;
                CurDist += dist;

            }
        }
    }

}


[numthreads(64, 1, 1)]
void kernel_heightmap() {//If I move the function contents into here, unity yells at me, so for now its just gonna continue to live in its function

    IntersectHeightMap();
}





