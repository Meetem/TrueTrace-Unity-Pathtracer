#pragma kernel CombineTriBuffers

struct CudaTriangle {
	float3 pos0;
	float3 posedge1;
	float3 posedge2;

	uint3 norms;

	uint3 tans;

	float2 tex0;
	float2 texedge1;
	float2 texedge2;

	uint MatDat;
};

RWStructuredBuffer<CudaTriangle> OutCudaTriArray;

StructuredBuffer<CudaTriangle> InCudaTriArray;

uint Offset;
uint Count;

[numthreads(372, 1, 1)]
void CombineTriBuffers(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= Count)
		return;

	OutCudaTriArray[id.x + Offset] = InCudaTriArray[id.x];

}



#pragma kernel CombineNodeBuffers

struct BVHNode8DataCompressed {
	uint4 node_0;
	uint4 node_1;
	uint4 node_2;
	uint4 node_3;
	uint4 node_4;
};

RWStructuredBuffer<BVHNode8DataCompressed> OutAggNodes;

StructuredBuffer<BVHNode8DataCompressed> InAggNodes;

[numthreads(372, 1, 1)]
void CombineNodeBuffers(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= Count)
		return;

	OutAggNodes[id.x + Offset] = InAggNodes[id.x];

}

#pragma kernel CombineLightBuffers

struct LightTriData {
	float3 pos0;
	float3 posedge1;
	float3 posedge2;
	uint TriTarget;
};

StructuredBuffer<LightTriData> LightTrianglesIn;
RWStructuredBuffer<LightTriData> LightTrianglesOut;

[numthreads(372, 1, 1)]
void CombineLightBuffers(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= Count)
		return;

	LightTrianglesOut[id.x + Offset] = LightTrianglesIn[id.x];

}



#pragma kernel CombineLightNodes

struct LightBVHData {
	float3 BBMax;
	float3 BBMin;
	uint w;
	float phi;
	uint cosTheta_oe;
	int left;
};

StructuredBuffer<LightBVHData> LightNodesIn;
RWStructuredBuffer<LightBVHData> LightNodesOut;

[numthreads(372, 1, 1)]
void CombineLightNodes(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= Count)
		return;

	LightNodesOut[id.x + Offset] = LightNodesIn[id.x];

}